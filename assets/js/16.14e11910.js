(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{337:function(t,_,e){t.exports=e.p+"assets/img/tcp-header.c3035125.jpg"},338:function(t,_,e){t.exports=e.p+"assets/img/tcp-progress.999c17eb.jpg"},339:function(t,_,e){t.exports=e.p+"assets/img/tcp-woshou.0a2d0f4c.jpg"},340:function(t,_,e){t.exports=e.p+"assets/img/tcp-chuanshu.5446c012.jpg"},341:function(t,_,e){t.exports=e.p+"assets/img/tcp-huishou.f41a2201.jpg"},434:function(t,_,e){"use strict";e.r(_);var r=e(25),s=Object(r.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"tcp协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp协议"}},[t._v("#")]),t._v(" TCP协议")]),t._v(" "),_("h2",{attrs:{id:"_1-tcp的功能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-tcp的功能"}},[t._v("#")]),t._v(" 1. TCP的功能")]),t._v(" "),_("p",[t._v("TCP主要是将数据进行分段打包传输，对每个数据包编号控制顺序，运输中丢失、重发和丢弃处理。")]),t._v(" "),_("h2",{attrs:{id:"_2-tcp头的介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp头的介绍"}},[t._v("#")]),t._v(" 2. TCP头的介绍")]),t._v(" "),_("p",[t._v("介绍头部之前，我们先通过一张图解直观认识下TCP头部")]),t._v(" "),_("p",[_("img",{attrs:{src:e(337),alt:"TCP头部详解"}})]),t._v(" "),_("ol",[_("li",[_("p",[_("strong",[t._v("Source Port 和 Destination Port")]),_("br"),t._v(" "),_("strong",[t._v("源端口号和目标端口号;计算机通过端口号识别访问哪个服务,比如http服务或ftp服务;发送方端口号是进行随机端口;目标端口号决定了接收方哪个程序来接收。")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("Sequence number")]),_("br"),t._v(" "),_("strong",[t._v("序列号(32位)，TCP用序列号对数据包进行标记，以便在到达目的地后重新重装。在建立连接时通常由计算机生成一个随机数作为序列号的初始值。")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("Acknowledgment number")]),_("br"),t._v(" "),_("strong",[t._v("确认号(32位)，确认应答号。发送端接收到这个确认应答后，可以认为这个位置以前所有的数据都已被正常接收。")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("Header Length")]),_("br"),t._v(" "),_("strong",[t._v("首部长度。单位是 '4'个'字节'，如果没有可选字段，那么这里的值就是 5。表示 TCP 首部的长度为 20 字节。")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("checksum")]),_("br"),t._v(" "),_("strong",[t._v("16位校验和。用来做差错控制，TCP校验和的计算包括TCP首部、数据和其它填充字节。")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("flags")]),_("br"),t._v(" "),_("strong",[t._v("控制位。TCP的连接、传输和断开都受这六个控制位的指挥")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("window size")]),_("br"),t._v(" "),_("strong",[t._v("本地可接收数据的数目，这个值的大小是可变的。当网络通畅时将这个窗口值变大加快传输速度，当网络不稳定时减少这个值可以保证网络数据的可靠传输。它是来在TCP传输中进行流量控制的")])])])]),t._v(" "),_("h2",{attrs:{id:"_3-tcp-三次握手-数据传输-四次挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-tcp-三次握手-数据传输-四次挥手"}},[t._v("#")]),t._v(" 3. TCP 三次握手-数据传输-四次挥手")]),t._v(" "),_("p",[_("img",{attrs:{src:e(338),alt:"TCP传输详情图解"}})]),t._v(" "),_("p",[t._v("我们把这个过程分为三部分，第一部分为三次握手建立连接，第二部分为数据传输，第三次为四次挥手断开连接。")]),t._v(" "),_("h3",{attrs:{id:"_3-1-tcp-三次握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-tcp-三次握手"}},[t._v("#")]),t._v(" 3.1 TCP 三次握手")]),t._v(" "),_("p",[t._v("我们分析一下三次握手的过程（包括ack 和 seq的值变化）。\n"),_("img",{attrs:{src:e(339),alt:"TCP三次握手图解"}})]),t._v(" "),_("p",[_("strong",[t._v("为了方便描述我们将主动发起请求的172.16.17.94:8080 主机称为客户端，将返回数据的主机172.16.17.94:8080称为服务器，以下也是。")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("第一次握手(SYN=1, seq=x):"),_("br"),t._v("\n客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。")])]),t._v(" "),_("li",[_("p",[t._v("第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):"),_("br"),t._v("\n服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加1，即X+1。 发送完毕后，服务器端进入 SYN_RCVD 状态。")])]),t._v(" "),_("li",[_("p",[t._v("第三次握手(ACK=1，ACKnum=y+1):"),_("br"),t._v("\n客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1"),_("br"),t._v("\n发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束。")])])]),t._v(" "),_("h3",{attrs:{id:"_3-2-tcp-数据传输"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-tcp-数据传输"}},[t._v("#")]),t._v(" 3.2 TCP 数据传输")]),t._v(" "),_("p",[_("img",{attrs:{src:e(340),alt:"TCP数据传输图解"}})]),t._v(" "),_("ul",[_("li",[t._v("客户端先向服务器发送数据，该数据报是lenth为159的数据。")]),t._v(" "),_("li",[t._v("服务器收到报文后, 也向客户端发送了一个数据进行确认（ACK），并且返回客户端要请求的数据，数据的长度为111，将seq设置为1，ack设置为160（1 + 159）。")]),t._v(" "),_("li",[t._v("客户端收到服务器返回的数据后进行确认（ACK），将seq设置为160， ack设置为112（1 + 111）。")])]),t._v(" "),_("h3",{attrs:{id:"_3-3-tcp-四次挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-tcp-四次挥手"}},[t._v("#")]),t._v(" 3.3 TCP 四次挥手")]),t._v(" "),_("p",[_("img",{attrs:{src:e(341),alt:"TCP四次挥手图解"}}),t._v("\nTCP 的连接的断开需要发送四个包，因此称为四次挥手(Four-way handshake)，也叫做改进的三次握手。客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 close() 操作即可产生挥手操作")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("第一次挥手(FIN=1，seq=x)"),_("br"),t._v("\n假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为1的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。"),_("br"),t._v("\n发送完毕后，客户端进入 FIN_WAIT_1 状态。")])]),t._v(" "),_("li",[_("p",[t._v("第二次挥手(ACK=1，ACKnum=x+1)"),_("br"),t._v("\n服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。"),_("br"),t._v("\n发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态，等待服务器端关闭连接。")])]),t._v(" "),_("li",[_("p",[t._v("第三次挥手(FIN=1，seq=y)"),_("br"),t._v("\n服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为1。"),_("br"),t._v("\n发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个ACK。")])]),t._v(" "),_("li",[_("p",[t._v("第四次挥手(ACK=1，ACKnum=y+1)"),_("br"),t._v("\n客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT状态，等待可能出现的要求重传的 ACK 包。"),_("br"),t._v("\n服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。"),_("br"),t._v("\n客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。")])])]),t._v(" "),_("h2",{attrs:{id:"_4-syn-攻击"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-syn-攻击"}},[t._v("#")]),t._v(" 4. SYN 攻击")]),t._v(" "),_("h3",{attrs:{id:"_4-1-什么是-syn-攻击-syn-flood"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-什么是-syn-攻击-syn-flood"}},[t._v("#")]),t._v(" 4.1 什么是 SYN 攻击（SYN Flood）?")]),t._v(" "),_("p",[t._v("在三次握手过程中，服务器发送 SYN-ACK 之后，收到客户端的 ACK 之前的 TCP 连接称为半连接(half-open connect)。此时服务器处于 SYN_RCVD 状态。当收到 ACK 后，服务器才能转入 ESTABLISHED 状态."),_("br"),t._v("\nSYN 攻击指的是，攻击客户端在短时间内伪造大量不存在的IP地址，向服务器不断地发送SYN包，服务器回复确认包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。"),_("br"),t._v("\nSYN 攻击是一种典型的 DoS/DDoS 攻击。")]),t._v(" "),_("h3",{attrs:{id:"_4-2-如何检测-syn-攻击"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-如何检测-syn-攻击"}},[t._v("#")]),t._v(" 4.2 如何检测 SYN 攻击？")]),t._v(" "),_("p",[t._v("检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击。在 Linux/Unix 上可以使用系统自带的 netstats 命令来检测 SYN 攻击。")]),t._v(" "),_("h3",{attrs:{id:"_4-3-如何防御-syn-攻击"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-如何防御-syn-攻击"}},[t._v("#")]),t._v(" 4.3 如何防御 SYN 攻击？")]),t._v(" "),_("p",[t._v("SYN攻击不能完全被阻止，除非将TCP协议重新设计。我们所做的是尽可能的减轻SYN攻击的危害，常见的防御 SYN 攻击的方法有如下几种："),_("br")]),t._v(" "),_("ul",[_("li",[t._v("缩短超时（SYN Timeout）时间"),_("br")]),t._v(" "),_("li",[t._v("增加最大半连接数"),_("br")]),t._v(" "),_("li",[t._v("过滤网关防护"),_("br")]),t._v(" "),_("li",[t._v("SYN cookies技术"),_("br")])]),t._v(" "),_("h2",{attrs:{id:"_5-tcp-keepalive"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-tcp-keepalive"}},[t._v("#")]),t._v(" 5. TCP KeepAlive")]),t._v(" "),_("p",[t._v("TCP 的连接，实际上是一种纯软件层面的概念，在物理层面并没有“连接”这种概念。TCP 通信双方建立交互的连接，但是并不是一直存在数据交互，有些连接会在数据交互完毕后，主动释放连接，而有些不会。在长时间无数据交互的时间段内，交互双方都有可能出现掉电、死机、异常重启等各种意外，当这些意外发生之后，这些 TCP 连接并未来得及正常释放，在软件层面上，连接的另一方并不知道对端的情况，它会一直维护这个连接，长时间的积累会导致非常多的半打开连接，造成端系统资源的消耗和浪费，为了解决这个问题，在传输层可以利用 TCP 的 KeepAlive 机制实现来实现。主流的操作系统基本都在内核里支持了这个特性。"),_("br"),t._v("\nTCP KeepAlive 的基本原理是，隔一段时间给连接对端发送一个探测包，如果收到对方回应的 ACK，则认为连接还是存活的，在超过一定重试次数之后还是没有收到对方的回应，则丢弃该 TCP 连接。"),_("br"),t._v(" "),_("a",{attrs:{href:"http://www.tldp.org/HOWTO/html_single/TCP-Keepalive-HOWTO/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP-Keepalive-HOWTO"),_("OutboundLink")],1),t._v(" 有对 TCP KeepAlive 特性的详细介绍，有兴趣的同学可以参考。这里主要说一下，TCP KeepAlive 的局限。首先 TCP KeepAlive 监测的方式是发送一个 probe 包，会给网络带来额外的流量，另外 TCP KeepAlive 只能在内核层级监测连接的存活与否，而连接的存活不一定代表服务的可用。例如当一个服务器 CPU 进程服务器占用达到 100%，已经卡死不能响应请求了，此时 TCP KeepAlive 依然会认为连接是存活的。因此 TCP KeepAlive 对于应用层程序的价值是相对较小的。需要做连接保活的应用层程序，例如 QQ，往往会在应用层实现自己的心跳功能。")])])}),[],!1,null,null,null);_.default=s.exports}}]);