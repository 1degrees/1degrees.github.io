(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{399:function(t,n,s){"use strict";s.r(n);var a=s(25),r=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"二、-变量、作用域和内存问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、-变量、作用域和内存问题"}},[t._v("#")]),t._v(" 二、 变量、作用域和内存问题.")]),t._v(" "),n("h2",{attrs:{id:"_1-基本类型和引用类型的值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本类型和引用类型的值"}},[t._v("#")]),t._v(" 1 基本类型和引用类型的值")]),t._v(" "),n("p",[t._v("ECMAScript 变量可能包含两种不同数据类型的值：基本类型值和引用类型值。基本类型值指的是\n简单的数据段，而引用类型值指那些可能由多个值构成的对象。\n在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。第3 章讨论了5 种\n基本数据类型：Undefined、Null、Boolean、Number 和String。这5 种基本数据类型是按值访问\n的，因为可以操作保存在变量中的实际的值。\n引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript 不允许直接访问内存中的位置，\n也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。\n为此，引用类型的值是按引用访问的。")]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("在很多语言中，字符串以对象的形式来表示，因此被认为是引用类型的。\nECMAScript 放弃了这一传统。")])]),t._v(" "),n("h2",{attrs:{id:"_2-执行环境及作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-执行环境及作用域"}},[t._v("#")]),t._v(" 2 执行环境及作用域")]),t._v(" "),n("p",[t._v("执行环境（execution context，为简单起见，有时也称为“环境”）是JavaScript 中最为重要的一个概\n念。执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个\n与之关联的变量对象（variable object），环境中定义的所有变量和函数都保存在这个对象中。虽然我们\n编写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。\n全局执行环境是最外围的一个执行环境。根据ECMAScript 实现所在的宿主环境不同，表示执行环\n境的对象也不一样。在Web 浏览器中，全局执行环境被认为是window 对象（第7 章将详细讨论），因\n此所有全局变量和函数都是作为window 对象的属性和方法创建的。某个执行环境中的所有代码执行完\n毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退\n出——例如关闭网页或浏览器——时才会被销毁）。\n每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。\n而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。ECMAScript 程序中的执行流\n正是由这个方便的机制控制着。\n当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的用途，是\n保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所\n在环境的变量对象。如果这个环境是函数，则将其活动对象（activation object）作为变量对象。活动对\n象在最开始时只包含一个变量，即arguments 对象（这个对象在全局环境中是不存在的）。作用域链中\n的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含环境。这样，一直延\n续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。\n标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，\n然后逐级地向后回溯，直至找到标识符为止（如果找不到标识符，通常会导致错误发生）。\n请看下面的示例代码：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" color "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"blue"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeColor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("color "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"blue"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        color "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"red"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        color "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"blue"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeColor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Color is now "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("在这个简单的例子中，函数changeColor()的作用域链包含两个对象：它自己的变量对象（其中\n定义着arguments 对象）和全局环境的变量对象。可以在函数内部访问变量color，就是因为可以在\n这个作用域链中找到它。")]),t._v(" "),n("p",[t._v("此外，在局部作用域中定义的变量可以在局部环境中与全局变量互换使用，如下面这个例子所示：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" color "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"blue"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeColor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" anotherColor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"red"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("swapColors")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tempColor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" anotherColor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        anotherColor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        color "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tempColor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里可以访问color、anotherColor 和tempColor")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里可以访问color 和anotherColor，但不能访问tempColor")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("swapColors")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里只能访问color")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeColor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("以上代码共涉及3 个执行环境：全局环境、changeColor()的局部环境和swapColors()的局部\n环境。全局环境中有一个变量color 和一个函数changeColor()。changeColor()的局部环境中有\n一个名为anotherColor 的变量和一个名为swapColors()的函数，但它也可以访问全局环境中的变\n量color。swapColors()的局部环境中有一个变量tempColor，该变量只能在这个环境中访问到。\n无论全局环境还是changeColor()的局部环境都无权访问tempColor。然而，在swapColors()内部\n则可以访问其他两个环境中的所有变量，因为那两个环境是它的父执行环境。")]),t._v(" "),n("h2",{attrs:{id:"_3-垃圾收集"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-垃圾收集"}},[t._v("#")]),t._v(" 3 垃圾收集")]),t._v(" "),n("p",[t._v("JavaScript 具有自动垃圾收集机制，也就是说，执行环境会负责管理代码执行过程中使用的内存。\n而在C 和C++之类的语言中，开发人员的一项基本任务就是手工跟踪内存的使用情况，这是造成许多问\n题的一个根源。在编写JavaScript 程序时，开发人员不用再关心内存使用问题，所需内存的分配以及无\n用内存的回收完全实现了自动管理。这种垃圾收集机制的原理其实很简单：找出那些不再继续使用的变\n量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间），\n周期性地执行这一操作。\n下面我们来分析一下函数中局部变量的正常生命周期。局部变量只在函数执行的过程中存在。而在\n这个过程中，会为局部变量在栈（或堆）内存上分配相应的空间，以便存储它们的值。然后在函数中使\n用这些变量，直至函数执行结束。此时，局部变量就没有存在的必要了，因此可以释放它们的内存以供\n将来使用。在这种情况下，很容易判断变量是否还有存在的必要；但并非所有情况下都这么容易就能得\n出结论。垃圾收集器必须跟踪哪个变量有用哪个变量没用，对于不再有用的变量打上标记，以备将来收\n回其占用的内存。用于标识无用变量的策略可能会因实现而异，但具体到浏览器中的实现，则通常有两\n个策略。")]),t._v(" "),n("ul",[n("li",[t._v("3.1 标记清除")])]),t._v(" "),n("p",[t._v("JavaScript 中最常用的垃圾收集方式是标记清除（mark-and-sweep）。当变量进入环境（例如，在函\n数中声明一个变量）时，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所\n占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为\n“离开环境”。\n垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方\n式）。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记。而在此之后再被加上标记\n的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾收集器\n完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。")]),t._v(" "),n("ul",[n("li",[t._v("3.2 引用计数")])]),t._v(" "),n("p",[t._v("引用计数的含义是跟踪记录每\n个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。\n如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取\n得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0 时，则说明没有办法再访问这\n个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾收集器下次再运行时，它就会释放那\n些引用次数为零的值所占用的内存。")]),t._v(" "),n("ul",[n("li",[t._v("3.4 管理内存")])]),t._v(" "),n("p",[t._v("优化内存占用的最佳方式，就是为执行\n中的代码只保存必要的数据。一旦数据不再有用，最好通过将其值设置为null 来释放其引用——这个\n做法叫做解除引用（dereferencing）")])])}),[],!1,null,null,null);n.default=r.exports}}]);